from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string

from rest_framework import serializers

from .models import Win, Breakdown, Advisor, CustomerResponse, Notification


class WinSerializer(serializers.ModelSerializer):

    id = serializers.CharField(read_only=True)

    class Meta(object):
        model = Win
        fields = (
            "id",
            "user",
            "company_name",
            "cdms_reference",
            "customer_name",
            "customer_job_title",
            "customer_email_address",
            "customer_location",
            "business_type",
            "description",
            "name_of_customer",
            "name_of_export",
            "date",
            "country",
            "type",
            "total_expected_export_value",
            "goods_vs_services",
            "total_expected_non_export_value",
            "sector",
            "is_prosperity_fund_related",
            "hvo_programme",
            "has_hvo_specialist_involvement",
            "is_e_exported",
            "type_of_support_1",
            "type_of_support_2",
            "type_of_support_3",
            "associated_programme_1",
            "associated_programme_2",
            "associated_programme_3",
            "is_personally_confirmed",
            "is_line_manager_confirmed",
            "lead_officer_name",
            "lead_officer_email_address",
            "other_official_email_address",
            "line_manager_name",
            "team_type",
            "hq_team",
            "location",
            "created",
        )

    def validate_user(self, value):
        return self.context["request"].user


class LimitedWinSerializer(serializers.ModelSerializer):

    id = serializers.CharField(read_only=True)
    type = serializers.CharField(source="get_type_display")
    country = serializers.CharField(source="country.name")
    customer_location = serializers.CharField(source="get_customer_location_display")
    goods_vs_services = serializers.CharField(source="get_goods_vs_services_display")

    class Meta(object):
        model = Win
        fields = (
            "id",
            "description",
            "type",
            "date",
            "country",
            "customer_location",
            "total_expected_export_value",
            "total_expected_non_export_value",
            "goods_vs_services",
            "created",
        )


class BreakdownSerializer(serializers.ModelSerializer):

    class Meta(object):
        model = Breakdown
        fields = (
            "win",
            "type",
            "year",
            "value"
        )


class AdvisorSerializer(serializers.ModelSerializer):

    class Meta(object):
        model = Advisor
        fields = (
            "name",
            "team_type",
            "hq_team",
            "location"
        )


class NotificationSerializer(serializers.ModelSerializer):

    recipient = serializers.EmailField(required=False)

    class Meta(object):
        model = Notification
        fields = (
            "win",
            "user",
            "recipient",
            "type",
            "created"
        )

    @classmethod
    def generate_officer_email(cls, win):
        target_addresses = [win.user.email]
        if win.lead_officer_email_address:
            target_addresses.append(win.lead_officer_email_address)
        if win.other_official_email_address:
            target_addresses.append(win.other_official_email_address)
        target_addresses = tuple(set(target_addresses))

        body = render_to_string("wins/email/officer-thanks.email", {
            "win": win,
            "feedback_address": settings.FEEDBACK_ADDRESS
        })

        return {
            'subject': "Thank you for submitting a new Export Win.",
            'body': body,
            'from': settings.SENDING_ADDRESS,
            'to': target_addresses,
        }

    @classmethod
    def send_intermediate_officer_email(cls, win):
        """ Send mail to officer notifying them that customer will be sent
        email at some point, when manual process gets around to it.

        """

        email_dict = cls.generate_officer_email(win)
        email_dict['body'] = render_to_string("wins/email/officer-thanks-intermediate.email", {
            "win": win,
            "feedback_address": settings.FEEDBACK_ADDRESS
        })

        send_mail(
            email_dict['subject'],
            email_dict['body'],
            email_dict['from'],
            email_dict['to'],
        )

    @classmethod
    def send_officer_email(cls, win):
        """ Send mail to officer notifying them customer has been sent link to
        customer response form

        This is not currently used, instead is generated by manual process

        """

        email_dict = cls.generate_officer_email(win)
        send_mail(
            email_dict['subject'],
            email_dict['body'],
            email_dict['from'],
            email_dict['to'],
        )

    @classmethod
    def generate_customer_email(cls, url, win):

        body = render_to_string("wins/email/customer-notification.email", {
            "win": win,
            "url": url
        })

        return {
            'subject': "Congratulations from {} on your export business success".format(
                            win.lead_officer_name
                        ),
            'body': body,
            'from': settings.SENDING_ADDRESS,
            'to': (win.customer_email_address,),
        }

    @classmethod
    def send_customer_email(cls, request, win):
        """ Send mail to customer asking them to confirm a win

        Not currently used, instead manual process

        """
        email_dict = cls.generate_customer_email(request.POST.get("url"), win)
        send_mail(
            email_dict['subject'],
            email_dict['body'],
            email_dict['from'],
            email_dict['to'],
        )


class CustomerResponseSerializer(serializers.ModelSerializer):

    class Meta(object):
        model = CustomerResponse
        fields = (
            "win",
            "access_to_contacts",
            "access_to_information",
            "improved_profile",
            "gained_confidence",
            "developed_relationships",
            "overcame_problem",
            "involved_state_enterprise",
            "interventions_were_prerequisite",
            "support_improved_speed",
            "expected_portion_without_help",
            "last_export",
            "company_was_at_risk_of_not_exporting",
            "has_explicit_export_plans",
            "has_enabled_expansion_into_new_market",
            "has_increased_exports_as_percent_of_turnover",
            "has_enabled_expansion_into_existing_market",
            "comments",
            "name",
            "created",
        )
